# qr_reader_opencv.py - OpenCV'nin QR dedekt√∂r√º ile alternatif versiyon
import pystray
from PIL import Image, ImageGrab, ImageDraw
import cv2
import numpy as np
import pyperclip
import tkinter as tk
from tkinter import messagebox
import keyboard
import threading
import sys

class QRReaderTray:
    def __init__(self):
        self.icon = None
        self.selecting = False
        self.selection_window = None
        
        # OpenCV QR dedekt√∂r√º
        self.qr_detector = cv2.QRCodeDetector()
        
    def create_icon(self):
        # QR kod ≈üeklinde icon olu≈ütur
        image = Image.new('RGB', (64, 64), color='white')
        draw = ImageDraw.Draw(image)
        
        # Basit QR kod g√∂r√ºn√ºm√º
        for i in range(0, 64, 8):
            for j in range(0, 64, 8):
                if (i + j) % 16 == 0:
                    draw.rectangle([i, j, i+6, j+6], fill='black')
        
        menu = pystray.Menu(
            pystray.MenuItem("QR Oku (Win+Q)", self.start_selection),
            pystray.MenuItem("√áƒ±kƒ±≈ü", self.quit_app)
        )
        
        self.icon = pystray.Icon("QR Reader", image, menu=menu)
        
    def start_selection(self, icon=None, item=None):
        if self.selecting:
            return
            
        self.selecting = True
        
        # Se√ßim penceresi
        self.selection_window = tk.Tk()
        self.selection_window.attributes('-fullscreen', True)
        self.selection_window.attributes('-alpha', 0.3)
        self.selection_window.attributes('-topmost', True)
        self.selection_window.configure(background='gray')
        
        # Canvas olu≈ütur
        self.canvas = tk.Canvas(self.selection_window, highlightthickness=0)
        self.canvas.pack(fill='both', expand=True)
        
        self.start_x = None
        self.start_y = None
        self.rect = None
        
        # ƒ∞pucu metni
        hint_text = self.canvas.create_text(
            self.selection_window.winfo_screenwidth() // 2,
            50,
            text="QR kodun etrafƒ±nƒ± se√ßin ve bƒ±rakƒ±n",
            font=('Arial', 16, 'bold'),
            fill='white'
        )
        
        def on_mouse_down(event):
            # Ekran koordinatlarƒ±nƒ± al
            self.start_x = self.selection_window.winfo_pointerx()
            self.start_y = self.selection_window.winfo_pointery()
            
        def on_mouse_move(event):
            if self.start_x is not None:
                # Mevcut rect'i sil
                if self.rect:
                    self.canvas.delete(self.rect)
                
                # Yeni rect √ßiz
                current_x = self.selection_window.winfo_pointerx()
                current_y = self.selection_window.winfo_pointery()
                
                x1 = min(self.start_x, current_x) - self.selection_window.winfo_rootx()
                y1 = min(self.start_y, current_y) - self.selection_window.winfo_rooty()
                x2 = max(self.start_x, current_x) - self.selection_window.winfo_rootx()
                y2 = max(self.start_y, current_y) - self.selection_window.winfo_rooty()
                
                self.rect = self.canvas.create_rectangle(x1, y1, x2, y2, 
                                                       outline='#00ff00', width=3)
            
        def on_mouse_up(event):
            if self.start_x is None:
                self.selection_window.destroy()
                self.selecting = False
                return
                
            # Ekran koordinatlarƒ±nƒ± al
            end_x = self.selection_window.winfo_pointerx()
            end_y = self.selection_window.winfo_pointery()
            
            # Se√ßim alanƒ±nƒ± hesapla (biraz geni≈ület)
            margin = 20  # Kenar bo≈üluƒüu
            x1 = min(self.start_x, end_x) - margin
            y1 = min(self.start_y, end_y) - margin
            x2 = max(self.start_x, end_x) + margin
            y2 = max(self.start_y, end_y) + margin
            
            # Ekran sƒ±nƒ±rlarƒ±nƒ± kontrol et
            x1 = max(0, x1)
            y1 = max(0, y1)
            
            # Pencereyi kapat
            self.selection_window.destroy()
            self.selecting = False
            
            # En az 50x50 piksel se√ßim yapƒ±lmƒ±≈ü mƒ± kontrol et
            if abs(x2 - x1) > 50 and abs(y2 - y1) > 50:
                try:
                    # Ekran g√∂r√ºnt√ºs√º al
                    screenshot = ImageGrab.grab(bbox=(x1, y1, x2, y2))
                    self.process_qr_opencv(screenshot)
                except Exception as e:
                    messagebox.showerror("Hata", f"Ekran g√∂r√ºnt√ºs√º alƒ±namadƒ±: {str(e)}")
            else:
                messagebox.showwarning("Uyarƒ±", "L√ºtfen QR kodun etrafƒ±nda daha b√ºy√ºk bir alan se√ßin!")
        
        def on_escape(event):
            self.selection_window.destroy()
            self.selecting = False
            
        self.selection_window.bind("<Button-1>", on_mouse_down)
        self.selection_window.bind("<B1-Motion>", on_mouse_move)
        self.selection_window.bind("<ButtonRelease-1>", on_mouse_up)
        self.selection_window.bind("<Escape>", on_escape)
        
        self.selection_window.mainloop()
        
    def process_qr_opencv(self, image):
        """OpenCV QR dedekt√∂r√º ile i≈üle"""
        try:
            # PIL'den numpy array'e √ßevir
            img_array = np.array(image)
            
            # BGR'ye √ßevir (OpenCV formatƒ±)
            img_bgr = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
            
            # Direkt decode dene
            data, points, _ = self.qr_detector.detectAndDecode(img_bgr)
            
            if data:
                self.show_popup(data)
                return
            
            # Gri tonlama ile dene
            gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
            data, points, _ = self.qr_detector.detectAndDecode(gray)
            
            if data:
                self.show_popup(data)
                return
            
            # G√∂r√ºnt√º iyile≈ütirmeleri ile dene
            enhanced_results = self.try_enhanced_detection(img_bgr)
            
            if enhanced_results:
                self.show_popup(enhanced_results)
            else:
                # pyzbar ile son deneme
                self.fallback_pyzbar_detection(img_array)
                
        except Exception as e:
            messagebox.showerror("Hata", f"QR kod i≈ülenirken hata: {str(e)}")
    
    def try_enhanced_detection(self, img):
        """Geli≈ümi≈ü algƒ±lama teknikleri"""
        # 1. Keskinle≈ütirme
        kernel = np.array([[-1,-1,-1],
                          [-1, 9,-1],
                          [-1,-1,-1]])
        sharpened = cv2.filter2D(img, -1, kernel)
        data, _, _ = self.qr_detector.detectAndDecode(sharpened)
        if data:
            return data
        
        # 2. Histogram e≈üitleme
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        equalized = cv2.equalizeHist(gray)
        data, _, _ = self.qr_detector.detectAndDecode(equalized)
        if data:
            return data
        
        # 3. B√ºy√ºtme
        scaled = cv2.resize(img, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
        data, _, _ = self.qr_detector.detectAndDecode(scaled)
        if data:
            return data
        
        # 4. Otsu threshold
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        data, _, _ = self.qr_detector.detectAndDecode(binary)
        if data:
            return data
        
        return None
    
    def fallback_pyzbar_detection(self, img_array):
        """pyzbar ile yedek algƒ±lama"""
        try:
            from pyzbar import pyzbar
            
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            
            # Farklƒ± threshold deƒüerleri dene
            for thresh_val in [100, 127, 150, 180, 200]:
                _, binary = cv2.threshold(gray, thresh_val, 255, cv2.THRESH_BINARY)
                qr_codes = pyzbar.decode(binary)
                if qr_codes:
                    data = qr_codes[0].data.decode('utf-8', errors='ignore')
                    self.show_popup(data)
                    return
            
            messagebox.showwarning("QR Bulunamadƒ±", 
                                 "QR kod okunamadƒ±!\n\n"
                                 "√ñneriler:\n"
                                 "‚Ä¢ QR kodun TAMAMI g√∂r√ºnecek ≈üekilde se√ßin\n"
                                 "‚Ä¢ Biraz daha geni≈ü alan se√ßin\n"
                                 "‚Ä¢ Ekranƒ± yakƒ±nla≈ütƒ±rƒ±n (Ctrl + +)\n"
                                 "‚Ä¢ Daha net/kontrast bir g√∂r√ºnt√º deneyin")
                                 
        except ImportError:
            messagebox.showwarning("QR Bulunamadƒ±", "QR kod okunamadƒ±!")
            
    def show_popup(self, text):
        # Pop-up pencere
        popup = tk.Tk()
        popup.title("üì± QR Kod ƒ∞√ßeriƒüi")
        popup.geometry("500x300")
        popup.attributes('-topmost', True)
        
        # Pencereyi ortala
        popup.update_idletasks()
        x = (popup.winfo_screenwidth() // 2) - (popup.winfo_width() // 2)
        y = (popup.winfo_screenheight() // 2) - (popup.winfo_height() // 2)
        popup.geometry(f'+{x}+{y}')
        
        # Ana frame
        main_frame = tk.Frame(popup, bg='white', padx=20, pady=20)
        main_frame.pack(fill='both', expand=True)
        
        # Ba≈ülƒ±k
        title_label = tk.Label(main_frame, text="Metin QR Kodu", 
                             font=('Arial', 14, 'bold'), bg='white')
        title_label.pack(pady=(0, 10))
        
        # Alt ba≈ülƒ±k
        subtitle_label = tk.Label(main_frame, text="ƒ∞√ßerik:", 
                                font=('Arial', 10), bg='white', fg='gray')
        subtitle_label.pack(anchor='w')
        
        # Metin alanƒ±
        text_frame = tk.Frame(main_frame, bg='#f0f0f0', relief='solid', borderwidth=1)
        text_frame.pack(fill='both', expand=True, pady=(5, 15))
        
        text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Consolas', 10),
                            bg='#f9f9f9', relief='flat', padx=10, pady=10)
        text_widget.pack(fill='both', expand=True)
        text_widget.insert('1.0', text)
        
        # Scrollbar
        scrollbar = tk.Scrollbar(text_widget)
        scrollbar.pack(side='right', fill='y')
        text_widget.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=text_widget.yview)
        
        # Butonlar
        button_frame = tk.Frame(main_frame, bg='white')
        button_frame.pack(fill='x')
        
        def copy_text():
            pyperclip.copy(text)
            copy_btn.config(text="‚úì Kopyalandƒ±!", bg='#4CAF50')
            popup.after(1500, popup.destroy)
            
        copy_btn = tk.Button(button_frame, text="üìã Kopyala", command=copy_text,
                           bg='#2196F3', fg='white', font=('Arial', 11, 'bold'),
                           padx=20, pady=8, relief='flat', cursor='hand2')
        copy_btn.pack(side='left', padx=(0, 10))
        
        close_btn = tk.Button(button_frame, text="Kapat", command=popup.destroy,
                            bg='#f0f0f0', font=('Arial', 11), padx=20, pady=8,
                            relief='flat', cursor='hand2')
        close_btn.pack(side='left')
        
        # Enter tu≈üu ile kopyala
        popup.bind('<Return>', lambda e: copy_text())
        popup.bind('<Escape>', lambda e: popup.destroy())
        
        # Metin se√ßilebilir yap ama d√ºzenlenemez
        text_widget.config(state='normal')
        text_widget.bind("<Key>", lambda e: "break")
        
        popup.mainloop()
        
    def quit_app(self, icon, item):
        self.icon.stop()
        sys.exit()
        
    def run(self):
        self.create_icon()
        
        # Ana thread'de icon'u ba≈ülat
        icon_thread = threading.Thread(target=self.icon.run, daemon=True)
        icon_thread.start()
        
        # Global hotkey'i kaydet
        keyboard.add_hotkey('win+q', self.start_selection)
        
        # Program kapatƒ±lana kadar bekle
        try:
            keyboard.wait()
        except KeyboardInterrupt:
            self.icon.stop()
            sys.exit()

if __name__ == "__main__":
    app = QRReaderTray()
    app.run()